package gestion;

import gestion.CompteController;
import gestion.DataStorage;
import gestion.EnfantController;
import modele.Educateur;
import modele.Parent;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Classe de test pour CompteController.
 * Teste les fonctionnalités liées à la vérification des identifiants de parents et éducateurs.
 */
class CompteControllerTest {
    private CompteController compteController; // Instance de CompteController à tester
    private DataStorage dataStorage; // Instance de DataStorage utilisée pour stocker les données

    /**
     * Méthode d'initialisation exécutée avant chaque test.
     * Elle permet de configurer un environnement de test propre.
     */
    @BeforeEach
    void setUp() {
        // Initialisation de DataStorage avec un contrôleur d'enfants
        dataStorage = new DataStorage(new EnfantController());

        // Création de l'instance de CompteController
        compteController = new CompteController(dataStorage);

        // Ajout de données simulées dans DataStorage pour les tests
        Parent parent = new Parent("Jean Dupont", "jean.dupont@mail.com", "password123");
        dataStorage.getParents()[0] = parent; // Ajout d'un parent dans le tableau

        Educateur educateur = new Educateur("Marie", "marie@mail.com", "educ123");
        dataStorage.getEducateurs()[0] = educateur; // Ajout d'un éducateur dans le tableau
    }

    /**
     * Teste la méthode verifierIdentifiants pour les parents.
     * Vérifie les cas d'authentification réussie et échouée.
     */
    @Test
    void testVerifierIdentifiantsParent() {
        // Vérifie que l'authentification réussit avec les identifiants corrects
        assertTrue(compteController.verifierIdentifiants("jean.dupont@mail.com", "password123"),
                "Identifiants corrects pour parent devraient être acceptés.");

        // Vérifie que l'authentification échoue avec un mot de passe incorrect
        assertFalse(compteController.verifierIdentifiants("jean.dupont@mail.com", "wrongpassword"),
                "Mot de passe incorrect pour parent devrait être rejeté.");

        // Vérifie que l'authentification échoue avec un email inconnu
        assertFalse(compteController.verifierIdentifiants("inconnu@mail.com", "password123"),
                "Email inconnu pour parent devrait être rejeté.");
    }

    /**
     * Teste la méthode verifierIdentifiantsEducateur pour les éducateurs.
     * Vérifie les cas d'authentification réussie et échouée.
     */
    @Test
    void testVerifierIdentifiantsEducateur() {
        // Vérifie que l'authentification réussit avec les identifiants corrects
        assertTrue(compteController.verifierIdentifiantsEducateur("medhi.souaki@enfantpro.fr", "ms1"),"Identifiants corrects pour éducateur devraient être acceptés.");
        assertTrue(compteController.verifierIdentifiantsEducateur("christelle.meudon@enfantpro.fr", "cm2"),"Identifiants corrects pour éducateur devraient être acceptés.");
        assertTrue(compteController.verifierIdentifiantsEducateur("julie.cazeneuve@efnantpro.fr", "jc3"),"Identifiants corrects pour éducateur devraient être acceptés.");

        // Vérifie que l'authentification échoue avec un mot de passe incorrect
        assertFalse(compteController.verifierIdentifiantsEducateur("marie@mail.com", "wrongpassword"),
                "Mot de passe incorrect pour éducateur devrait être rejeté.");

        // Vérifie que l'authentification échoue avec un email inconnu
        assertFalse(compteController.verifierIdentifiantsEducateur("inconnu@mail.com", "educ123"),
                "Email inconnu pour éducateur devrait être rejeté.");
    }
}
