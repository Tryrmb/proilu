package ihm;

import gestion.DataStorage;
import modele.Enfant;

import javax.swing.*;
import java.awt.*;
import java.util.Objects;

/**
 * Classe pour g√©rer les activit√©s avec une interface visuellement adapt√©e aux enfants.
 */
public class GestionActivitesIU extends JFrame {
    public GestionActivitesIU(String emailEducateur, DataStorage dataStorage) {
        setTitle("üåü Gestion des Activit√©s üåü");
        setSize(700, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        JPanel mainPanel = new JPanel(new BorderLayout());
        mainPanel.setBackground(new Color(245, 245, 220)); // Couleur pastel pour le fond

        JTextArea activitesTextArea = new JTextArea();
        activitesTextArea.setEditable(false);
        activitesTextArea.setFont(new Font("Comic Sans MS", Font.PLAIN, 14));
        activitesTextArea.setBackground(new Color(255, 255, 240)); // Fond clair pour le texte

        // Titre color√©
        JLabel titleLabel = new JLabel("üåà Gestion des Activit√©s üåà", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Comic Sans MS", Font.BOLD, 24));
        titleLabel.setForeground(new Color(72, 61, 139)); // Violet fonc√©
        mainPanel.add(titleLabel, BorderLayout.NORTH);

        // R√©cup√©ration des informations de l'√©ducateur
        var educateur = dataStorage.trouverEducateurParEmail(emailEducateur);
        if (educateur == null) {
            activitesTextArea.setText("Erreur : √âducateur introuvable.");
        } else {
            // Nettoyage du nom de l'√©ducateur
            String nomEducateur = Objects.requireNonNull(educateur.getNom()).trim().replaceAll("^\"|\"$", "");
            activitesTextArea.append("üë©‚Äçüè´ Nom de l'√©ducateur connect√© : \"" + nomEducateur + "\"\n");

            // D√©tection de la cat√©gorie
            String categorie = null;
            if ("Medhi Souaki".equalsIgnoreCase(nomEducateur)) {
                categorie = "Sorties en For√™t et Aquatiques";
            } else if ("Julie Cazeneuve".equalsIgnoreCase(nomEducateur)) {
                categorie = "Activit√©s R√©cr√©atives";
            } else if ("Christelle Meudon".equalsIgnoreCase(nomEducateur)) {
                categorie = "Activit√©s Culinaires";
            } else {
                activitesTextArea.append("Erreur : Cat√©gorie non d√©finie pour cet √©ducateur.\n");
            }

            if (categorie != null) {
                activitesTextArea.append("üìö Cat√©gorie d√©tect√©e : " + categorie + "\n");

                // Afficher les activit√©s compatibles pour chaque jour
                afficherActivitesParCategorie(categorie, dataStorage, activitesTextArea);
            }
        }

        JButton fermerButton = creerBouton("‚ùå Fermer", new Color(255, 105, 97));
        fermerButton.addActionListener(e -> dispose());

        mainPanel.add(new JScrollPane(activitesTextArea), BorderLayout.CENTER);
        mainPanel.add(fermerButton, BorderLayout.SOUTH);
        add(mainPanel);
    }

    private void afficherActivitesParCategorie(String categorie, DataStorage dataStorage, JTextArea activitesTextArea) {
        Enfant enfant = demanderEnfant(dataStorage);
        if (enfant != null) {
            activitesTextArea.append("üçé Allergies : " + String.join(", ", enfant.getAllergies()) + "\n");
            activitesTextArea.append("ü©∫ Probl√®mes de sant√© : " + String.join(", ", enfant.getProblemesDeSante()) + "\n");

            String[] jours = {"Lundi", "Mardi", "Mercredi", "Jeudi", "Vendredi"};

            if ("Sorties en For√™t et Aquatiques".equals(categorie)) {
                activitesTextArea.append("\nüå≥ Sortie For√™t :\n");
                String[] activitesForet = dataStorage.getActivitesCompatiblesParCategorie("Sorties en For√™t", enfant);
                afficherActivitesParJour(activitesForet, jours, activitesTextArea);

                activitesTextArea.append("\nüí¶ Sortie Aquatique :\n");
                String[] activitesAquatiques = dataStorage.getActivitesCompatiblesParCategorie("Sorties Aquatiques", enfant);
                afficherActivitesParJour(activitesAquatiques, jours, activitesTextArea);
            } else {
                String[] activitesCompatibles = dataStorage.getActivitesCompatiblesParCategorie(categorie, enfant);
                afficherActivitesParJour(activitesCompatibles, jours, activitesTextArea);
            }

            String activiteChoisie = JOptionPane.showInputDialog(this, "üåü Choisissez une activit√© (ou 0 pour retour) :");
            if (activiteChoisie != null && !"0".equals(activiteChoisie)) {
                enfant.ajouterActivite(activiteChoisie);
                JOptionPane.showMessageDialog(this, "üéâ Activit√© \"" + activiteChoisie + "\" ajout√©e pour \"" + enfant.getNom() + "\".");
            }
        } else {
            activitesTextArea.append("‚ùå Erreur : Aucun enfant valide trouv√©.\n");
        }
    }

    private void afficherActivitesParJour(String[] activites, String[] jours, JTextArea activitesTextArea) {
        for (int i = 0; i < jours.length; i++) {
            String activite = i < activites.length ? activites[i] : "Aucune activit√© compatible.";
            activitesTextArea.append("üìÖ Activit√© disponible " + jours[i] + " : " + activite + "\n");
        }
    }

    private Enfant demanderEnfant(DataStorage dataStorage) {
        String nomEnfant = JOptionPane.showInputDialog(this, "üë∂ Nom de l'enfant :");
        if (nomEnfant != null && !nomEnfant.trim().isEmpty()) {
            return dataStorage.trouverEnfantParNom(nomEnfant.trim());
        }
        return null;
    }

    private JButton creerBouton(String text, Color backgroundColor) {
        JButton button = new JButton(text);
        button.setFont(new Font("Comic Sans MS", Font.BOLD, 14));
        button.setBackground(backgroundColor);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(BorderFactory.createRaisedBevelBorder());
        button.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
        return button;
    }
}

