package gestion;

import modele.Enfant;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Classe GestionnaireIncompatibilité
 * Gère les vérifications d'incompatibilités pour les activités des enfants
 * en fonction de leurs allergies et conditions médicales.
 */
public class GestionnaireIncompatibilité {
    private Map<String, List<String>> incompatibilitesActivites; // Map des incompatibilités

    public GestionnaireIncompatibilité() {
        this.incompatibilitesActivites = new HashMap<>();
    }

    /**
     * Ajoute des incompatibilités pour une activité spécifique.
     * 
     * @param activite Nom de l'activité
     * @param incompatibilites Liste des incompatibilités
     */
    public void ajouterIncompatibilites(String activite, List<String> incompatibilites) {
        incompatibilitesActivites.put(activite, incompatibilites);
    }

    /**
     * Vérifie si une activité est compatible avec les allergies et les problèmes de santé d'un enfant.
     * 
     * @param activite Nom de l'activité
     * @param enfant Enfant à vérifier
     * @return true si compatible, false sinon
     */
    public boolean estCompatible(String activite, Enfant enfant) {
        List<String> incompatibilites = incompatibilitesActivites.get(activite);

        if (incompatibilites == null) {
            return true; // Pas d'incompatibilités définies pour cette activité
        }

        // Vérifie les incompatibilités avec les allergies et les problèmes de santé
        for (String condition : enfant.getAllergies()) {
            if (incompatibilites.contains(condition)) {
                return false; // Une incompatibilité détectée
            }
        }

        for (String probleme : enfant.getProblemesDeSante()) {
            if (incompatibilites.contains(probleme)) {
                return false; // Une incompatibilité détectée
            }
        }

        return true; // Aucune incompatibilité trouvée
    }

    /**
     * Affiche les incompatibilités pour chaque activité.
     */
    public void afficherIncompatibilites() {
        System.out.println("\n--- Incompatibilités des Activités ---");
        for (Map.Entry<String, List<String>> entry : incompatibilitesActivites.entrySet()) {
            System.out.println("Activité : " + entry.getKey());
            System.out.println("Incompatibilités : " + entry.getValue());
        }
    }

    /**
     * Charge les incompatibilités depuis un fichier CSV.
     * 
     * @param cheminFichier Chemin du fichier CSV contenant les incompatibilités
     * @throws IOException Si une erreur survient lors de la lecture du fichier
     */
    public void chargerIncompatibilitesDepuisCSV(String cheminFichier) throws IOException {
        BufferedReader reader = new BufferedReader(new FileReader(cheminFichier));
        String ligne;
        boolean isFirstLine = true;

        while ((ligne = reader.readLine()) != null) {
            if (isFirstLine) {
                isFirstLine = false;
                continue;
            }
            String[] donnees = ligne.split(",");
            if (donnees.length < 2) {
                System.err.println("Ligne ignorée : nombre insuffisant de colonnes -> " + ligne);
                continue;
            }

            String activite = donnees[0].trim();
            List<String> incompatibilites = List.of(donnees[1].split(";"));
            ajouterIncompatibilites(activite, incompatibilites);
        }
        reader.close();
    }
}
